// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/administration.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdministratorServiceClient is the client API for AdministratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministratorServiceClient interface {
	GenerateAgentKey(ctx context.Context, in *GenerateAgentKeyRequest, opts ...grpc.CallOption) (*GenerateAgentKeyResponse, error)
	ListAgentKey(ctx context.Context, in *ListAgentKeyRequest, opts ...grpc.CallOption) (*ListAgentKeyResponse, error)
	RevokeAgentKey(ctx context.Context, in *RevokeAgentKeyRequest, opts ...grpc.CallOption) (*RevokeAgentKeyResponse, error)
}

type administratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministratorServiceClient(cc grpc.ClientConnInterface) AdministratorServiceClient {
	return &administratorServiceClient{cc}
}

func (c *administratorServiceClient) GenerateAgentKey(ctx context.Context, in *GenerateAgentKeyRequest, opts ...grpc.CallOption) (*GenerateAgentKeyResponse, error) {
	out := new(GenerateAgentKeyResponse)
	err := c.cc.Invoke(ctx, "/AdministratorService/GenerateAgentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) ListAgentKey(ctx context.Context, in *ListAgentKeyRequest, opts ...grpc.CallOption) (*ListAgentKeyResponse, error) {
	out := new(ListAgentKeyResponse)
	err := c.cc.Invoke(ctx, "/AdministratorService/ListAgentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) RevokeAgentKey(ctx context.Context, in *RevokeAgentKeyRequest, opts ...grpc.CallOption) (*RevokeAgentKeyResponse, error) {
	out := new(RevokeAgentKeyResponse)
	err := c.cc.Invoke(ctx, "/AdministratorService/RevokeAgentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministratorServiceServer is the server API for AdministratorService service.
// All implementations must embed UnimplementedAdministratorServiceServer
// for forward compatibility
type AdministratorServiceServer interface {
	GenerateAgentKey(context.Context, *GenerateAgentKeyRequest) (*GenerateAgentKeyResponse, error)
	ListAgentKey(context.Context, *ListAgentKeyRequest) (*ListAgentKeyResponse, error)
	RevokeAgentKey(context.Context, *RevokeAgentKeyRequest) (*RevokeAgentKeyResponse, error)
	mustEmbedUnimplementedAdministratorServiceServer()
}

// UnimplementedAdministratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdministratorServiceServer struct {
}

func (UnimplementedAdministratorServiceServer) GenerateAgentKey(context.Context, *GenerateAgentKeyRequest) (*GenerateAgentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAgentKey not implemented")
}
func (UnimplementedAdministratorServiceServer) ListAgentKey(context.Context, *ListAgentKeyRequest) (*ListAgentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentKey not implemented")
}
func (UnimplementedAdministratorServiceServer) RevokeAgentKey(context.Context, *RevokeAgentKeyRequest) (*RevokeAgentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAgentKey not implemented")
}
func (UnimplementedAdministratorServiceServer) mustEmbedUnimplementedAdministratorServiceServer() {}

// UnsafeAdministratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministratorServiceServer will
// result in compilation errors.
type UnsafeAdministratorServiceServer interface {
	mustEmbedUnimplementedAdministratorServiceServer()
}

func RegisterAdministratorServiceServer(s grpc.ServiceRegistrar, srv AdministratorServiceServer) {
	s.RegisterService(&AdministratorService_ServiceDesc, srv)
}

func _AdministratorService_GenerateAgentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAgentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).GenerateAgentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdministratorService/GenerateAgentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).GenerateAgentKey(ctx, req.(*GenerateAgentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_ListAgentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).ListAgentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdministratorService/ListAgentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).ListAgentKey(ctx, req.(*ListAgentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_RevokeAgentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAgentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).RevokeAgentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdministratorService/RevokeAgentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).RevokeAgentKey(ctx, req.(*RevokeAgentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdministratorService_ServiceDesc is the grpc.ServiceDesc for AdministratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdministratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AdministratorService",
	HandlerType: (*AdministratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAgentKey",
			Handler:    _AdministratorService_GenerateAgentKey_Handler,
		},
		{
			MethodName: "ListAgentKey",
			Handler:    _AdministratorService_ListAgentKey_Handler,
		},
		{
			MethodName: "RevokeAgentKey",
			Handler:    _AdministratorService_RevokeAgentKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/administration.proto",
}
