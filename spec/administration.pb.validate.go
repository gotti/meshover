// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/administration.proto

package spec

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AgentKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentKeyMultiError, or nil
// if none found.
func (m *AgentKey) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Key

	if len(errors) > 0 {
		return AgentKeyMultiError(errors)
	}

	return nil
}

// AgentKeyMultiError is an error wrapping multiple validation errors returned
// by AgentKey.ValidateAll() if the designated constraints aren't met.
type AgentKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentKeyMultiError) AllErrors() []error { return m }

// AgentKeyValidationError is the validation error returned by
// AgentKey.Validate if the designated constraints aren't met.
type AgentKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentKeyValidationError) ErrorName() string { return "AgentKeyValidationError" }

// Error satisfies the builtin error interface
func (e AgentKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentKeyValidationError{}

// Validate checks the field values on AgentKeys with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentKeysMultiError, or nil
// if none found.
func (m *AgentKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AgentKeysValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AgentKeysValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AgentKeysValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AgentKeysMultiError(errors)
	}

	return nil
}

// AgentKeysMultiError is an error wrapping multiple validation errors returned
// by AgentKeys.ValidateAll() if the designated constraints aren't met.
type AgentKeysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentKeysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentKeysMultiError) AllErrors() []error { return m }

// AgentKeysValidationError is the validation error returned by
// AgentKeys.Validate if the designated constraints aren't met.
type AgentKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentKeysValidationError) ErrorName() string { return "AgentKeysValidationError" }

// Error satisfies the builtin error interface
func (e AgentKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentKeysValidationError{}

// Validate checks the field values on GenerateAgentKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAgentKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAgentKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAgentKeyRequestMultiError, or nil if none found.
func (m *GenerateAgentKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAgentKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateAgentKeyRequestMultiError(errors)
	}

	return nil
}

// GenerateAgentKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateAgentKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateAgentKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAgentKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAgentKeyRequestMultiError) AllErrors() []error { return m }

// GenerateAgentKeyRequestValidationError is the validation error returned by
// GenerateAgentKeyRequest.Validate if the designated constraints aren't met.
type GenerateAgentKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAgentKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAgentKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAgentKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAgentKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAgentKeyRequestValidationError) ErrorName() string {
	return "GenerateAgentKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAgentKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAgentKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAgentKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAgentKeyRequestValidationError{}

// Validate checks the field values on GenerateAgentKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAgentKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAgentKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAgentKeyResponseMultiError, or nil if none found.
func (m *GenerateAgentKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAgentKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgentKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateAgentKeyResponseValidationError{
					field:  "AgentKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateAgentKeyResponseValidationError{
					field:  "AgentKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgentKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateAgentKeyResponseValidationError{
				field:  "AgentKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateAgentKeyResponseMultiError(errors)
	}

	return nil
}

// GenerateAgentKeyResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateAgentKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateAgentKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAgentKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAgentKeyResponseMultiError) AllErrors() []error { return m }

// GenerateAgentKeyResponseValidationError is the validation error returned by
// GenerateAgentKeyResponse.Validate if the designated constraints aren't met.
type GenerateAgentKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAgentKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAgentKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAgentKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAgentKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAgentKeyResponseValidationError) ErrorName() string {
	return "GenerateAgentKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAgentKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAgentKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAgentKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAgentKeyResponseValidationError{}

// Validate checks the field values on ListAgentKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentKeyRequestMultiError, or nil if none found.
func (m *ListAgentKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAgentKeyRequestMultiError(errors)
	}

	return nil
}

// ListAgentKeyRequestMultiError is an error wrapping multiple validation
// errors returned by ListAgentKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAgentKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentKeyRequestMultiError) AllErrors() []error { return m }

// ListAgentKeyRequestValidationError is the validation error returned by
// ListAgentKeyRequest.Validate if the designated constraints aren't met.
type ListAgentKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentKeyRequestValidationError) ErrorName() string {
	return "ListAgentKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentKeyRequestValidationError{}

// Validate checks the field values on ListAgentKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentKeyResponseMultiError, or nil if none found.
func (m *ListAgentKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKeys()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAgentKeyResponseValidationError{
					field:  "Keys",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAgentKeyResponseValidationError{
					field:  "Keys",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeys()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAgentKeyResponseValidationError{
				field:  "Keys",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAgentKeyResponseMultiError(errors)
	}

	return nil
}

// ListAgentKeyResponseMultiError is an error wrapping multiple validation
// errors returned by ListAgentKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAgentKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentKeyResponseMultiError) AllErrors() []error { return m }

// ListAgentKeyResponseValidationError is the validation error returned by
// ListAgentKeyResponse.Validate if the designated constraints aren't met.
type ListAgentKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentKeyResponseValidationError) ErrorName() string {
	return "ListAgentKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentKeyResponseValidationError{}

// Validate checks the field values on RevokeAgentKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeAgentKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeAgentKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeAgentKeyRequestMultiError, or nil if none found.
func (m *RevokeAgentKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeAgentKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RevokeAgentKeyRequestMultiError(errors)
	}

	return nil
}

// RevokeAgentKeyRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeAgentKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeAgentKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeAgentKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeAgentKeyRequestMultiError) AllErrors() []error { return m }

// RevokeAgentKeyRequestValidationError is the validation error returned by
// RevokeAgentKeyRequest.Validate if the designated constraints aren't met.
type RevokeAgentKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAgentKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAgentKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAgentKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAgentKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAgentKeyRequestValidationError) ErrorName() string {
	return "RevokeAgentKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAgentKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAgentKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAgentKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAgentKeyRequestValidationError{}

// Validate checks the field values on RevokeAgentKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeAgentKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeAgentKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeAgentKeyResponseMultiError, or nil if none found.
func (m *RevokeAgentKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeAgentKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Result

	if len(errors) > 0 {
		return RevokeAgentKeyResponseMultiError(errors)
	}

	return nil
}

// RevokeAgentKeyResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeAgentKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type RevokeAgentKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeAgentKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeAgentKeyResponseMultiError) AllErrors() []error { return m }

// RevokeAgentKeyResponseValidationError is the validation error returned by
// RevokeAgentKeyResponse.Validate if the designated constraints aren't met.
type RevokeAgentKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAgentKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAgentKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAgentKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAgentKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAgentKeyResponseValidationError) ErrorName() string {
	return "RevokeAgentKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAgentKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAgentKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAgentKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAgentKeyResponseValidationError{}
