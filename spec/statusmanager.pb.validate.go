// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/statusmanager.proto

package spec

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MinimumNodeStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MinimumNodeStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MinimumNodeStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MinimumNodeStatusMultiError, or nil if none found.
func (m *MinimumNodeStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *MinimumNodeStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocalAS()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MinimumNodeStatusValidationError{
					field:  "LocalAS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MinimumNodeStatusValidationError{
					field:  "LocalAS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalAS()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinimumNodeStatusValidationError{
				field:  "LocalAS",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MinimumNodeStatusValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MinimumNodeStatusValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MinimumNodeStatusValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetEndpoint() == nil {
		err := MinimumNodeStatusValidationError{
			field:  "Endpoint",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MinimumNodeStatusValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MinimumNodeStatusValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinimumNodeStatusValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MinimumNodeStatusMultiError(errors)
	}

	return nil
}

// MinimumNodeStatusMultiError is an error wrapping multiple validation errors
// returned by MinimumNodeStatus.ValidateAll() if the designated constraints
// aren't met.
type MinimumNodeStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinimumNodeStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinimumNodeStatusMultiError) AllErrors() []error { return m }

// MinimumNodeStatusValidationError is the validation error returned by
// MinimumNodeStatus.Validate if the designated constraints aren't met.
type MinimumNodeStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinimumNodeStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinimumNodeStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinimumNodeStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinimumNodeStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinimumNodeStatusValidationError) ErrorName() string {
	return "MinimumNodeStatusValidationError"
}

// Error satisfies the builtin error interface
func (e MinimumNodeStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinimumNodeStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinimumNodeStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinimumNodeStatusValidationError{}

// Validate checks the field values on PeerWireguardStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PeerWireguardStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerWireguardStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PeerWireguardStatusMultiError, or nil if none found.
func (m *PeerWireguardStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerWireguardStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LatestHandshake

	// no validation rules for TxBytes

	// no validation rules for RxBytes

	if len(errors) > 0 {
		return PeerWireguardStatusMultiError(errors)
	}

	return nil
}

// PeerWireguardStatusMultiError is an error wrapping multiple validation
// errors returned by PeerWireguardStatus.ValidateAll() if the designated
// constraints aren't met.
type PeerWireguardStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerWireguardStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerWireguardStatusMultiError) AllErrors() []error { return m }

// PeerWireguardStatusValidationError is the validation error returned by
// PeerWireguardStatus.Validate if the designated constraints aren't met.
type PeerWireguardStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerWireguardStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerWireguardStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerWireguardStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerWireguardStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerWireguardStatusValidationError) ErrorName() string {
	return "PeerWireguardStatusValidationError"
}

// Error satisfies the builtin error interface
func (e PeerWireguardStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerWireguardStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerWireguardStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerWireguardStatusValidationError{}

// Validate checks the field values on PeerBGPStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PeerBGPStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerBGPStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PeerBGPStatusMultiError, or
// nil if none found.
func (m *PeerBGPStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerBGPStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteHostname

	if all {
		switch v := interface{}(m.GetLocalAS()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeerBGPStatusValidationError{
					field:  "LocalAS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeerBGPStatusValidationError{
					field:  "LocalAS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalAS()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeerBGPStatusValidationError{
				field:  "LocalAS",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRemoteAS()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeerBGPStatusValidationError{
					field:  "RemoteAS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeerBGPStatusValidationError{
					field:  "RemoteAS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemoteAS()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeerBGPStatusValidationError{
				field:  "RemoteAS",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBgpNeighborAddr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeerBGPStatusValidationError{
					field:  "BgpNeighborAddr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeerBGPStatusValidationError{
					field:  "BgpNeighborAddr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBgpNeighborAddr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeerBGPStatusValidationError{
				field:  "BgpNeighborAddr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BGPState

	if len(errors) > 0 {
		return PeerBGPStatusMultiError(errors)
	}

	return nil
}

// PeerBGPStatusMultiError is an error wrapping multiple validation errors
// returned by PeerBGPStatus.ValidateAll() if the designated constraints
// aren't met.
type PeerBGPStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerBGPStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerBGPStatusMultiError) AllErrors() []error { return m }

// PeerBGPStatusValidationError is the validation error returned by
// PeerBGPStatus.Validate if the designated constraints aren't met.
type PeerBGPStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerBGPStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerBGPStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerBGPStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerBGPStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerBGPStatusValidationError) ErrorName() string { return "PeerBGPStatusValidationError" }

// Error satisfies the builtin error interface
func (e PeerBGPStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerBGPStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerBGPStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerBGPStatusValidationError{}

// Validate checks the field values on PeerPingStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PeerPingStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerPingStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PeerPingStatusMultiError,
// or nil if none found.
func (m *PeerPingStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerPingStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AverageRTT

	if len(errors) > 0 {
		return PeerPingStatusMultiError(errors)
	}

	return nil
}

// PeerPingStatusMultiError is an error wrapping multiple validation errors
// returned by PeerPingStatus.ValidateAll() if the designated constraints
// aren't met.
type PeerPingStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerPingStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerPingStatusMultiError) AllErrors() []error { return m }

// PeerPingStatusValidationError is the validation error returned by
// PeerPingStatus.Validate if the designated constraints aren't met.
type PeerPingStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerPingStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerPingStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerPingStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerPingStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerPingStatusValidationError) ErrorName() string { return "PeerPingStatusValidationError" }

// Error satisfies the builtin error interface
func (e PeerPingStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerPingStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerPingStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerPingStatusValidationError{}

// Validate checks the field values on NodePeersStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NodePeersStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodePeersStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodePeersStatusMultiError, or nil if none found.
func (m *NodePeersStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *NodePeersStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RemoteHostname

	if all {
		switch v := interface{}(m.GetPingStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodePeersStatusValidationError{
					field:  "PingStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodePeersStatusValidationError{
					field:  "PingStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPingStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodePeersStatusValidationError{
				field:  "PingStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWireguardStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodePeersStatusValidationError{
					field:  "WireguardStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodePeersStatusValidationError{
					field:  "WireguardStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWireguardStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodePeersStatusValidationError{
				field:  "WireguardStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBgpStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodePeersStatusValidationError{
					field:  "BgpStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodePeersStatusValidationError{
					field:  "BgpStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBgpStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodePeersStatusValidationError{
				field:  "BgpStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NodePeersStatusMultiError(errors)
	}

	return nil
}

// NodePeersStatusMultiError is an error wrapping multiple validation errors
// returned by NodePeersStatus.ValidateAll() if the designated constraints
// aren't met.
type NodePeersStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodePeersStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodePeersStatusMultiError) AllErrors() []error { return m }

// NodePeersStatusValidationError is the validation error returned by
// NodePeersStatus.Validate if the designated constraints aren't met.
type NodePeersStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodePeersStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodePeersStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodePeersStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodePeersStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodePeersStatusValidationError) ErrorName() string { return "NodePeersStatusValidationError" }

// Error satisfies the builtin error interface
func (e NodePeersStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodePeersStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodePeersStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodePeersStatusValidationError{}

// Validate checks the field values on StatusManagerPeerStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatusManagerPeerStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusManagerPeerStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatusManagerPeerStatusMultiError, or nil if none found.
func (m *StatusManagerPeerStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusManagerPeerStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_StatusManagerPeerStatus_Hostname_Pattern.MatchString(m.GetHostname()) {
		err := StatusManagerPeerStatusValidationError{
			field:  "Hostname",
			reason: "value does not match regex pattern \"^[0-9a-fA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNodeStatus() == nil {
		err := StatusManagerPeerStatusValidationError{
			field:  "NodeStatus",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNodeStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusManagerPeerStatusValidationError{
					field:  "NodeStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusManagerPeerStatusValidationError{
					field:  "NodeStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusManagerPeerStatusValidationError{
				field:  "NodeStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPeerStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatusManagerPeerStatusValidationError{
						field:  fmt.Sprintf("PeerStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatusManagerPeerStatusValidationError{
						field:  fmt.Sprintf("PeerStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatusManagerPeerStatusValidationError{
					field:  fmt.Sprintf("PeerStatus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StatusManagerPeerStatusMultiError(errors)
	}

	return nil
}

// StatusManagerPeerStatusMultiError is an error wrapping multiple validation
// errors returned by StatusManagerPeerStatus.ValidateAll() if the designated
// constraints aren't met.
type StatusManagerPeerStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusManagerPeerStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusManagerPeerStatusMultiError) AllErrors() []error { return m }

// StatusManagerPeerStatusValidationError is the validation error returned by
// StatusManagerPeerStatus.Validate if the designated constraints aren't met.
type StatusManagerPeerStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusManagerPeerStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusManagerPeerStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusManagerPeerStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusManagerPeerStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusManagerPeerStatusValidationError) ErrorName() string {
	return "StatusManagerPeerStatusValidationError"
}

// Error satisfies the builtin error interface
func (e StatusManagerPeerStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusManagerPeerStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusManagerPeerStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusManagerPeerStatusValidationError{}

var _StatusManagerPeerStatus_Hostname_Pattern = regexp.MustCompile("^[0-9a-fA-Z-]+$")

// Validate checks the field values on RegisterStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterStatusRequestMultiError, or nil if none found.
func (m *RegisterStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatus() == nil {
		err := RegisterStatusRequestValidationError{
			field:  "Status",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterStatusRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterStatusRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterStatusRequestMultiError(errors)
	}

	return nil
}

// RegisterStatusRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterStatusRequestMultiError) AllErrors() []error { return m }

// RegisterStatusRequestValidationError is the validation error returned by
// RegisterStatusRequest.Validate if the designated constraints aren't met.
type RegisterStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterStatusRequestValidationError) ErrorName() string {
	return "RegisterStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterStatusRequestValidationError{}

// Validate checks the field values on RegisterStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterStatusResponseMultiError, or nil if none found.
func (m *RegisterStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterStatusResponseMultiError(errors)
	}

	return nil
}

// RegisterStatusResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterStatusResponseMultiError) AllErrors() []error { return m }

// RegisterStatusResponseValidationError is the validation error returned by
// RegisterStatusResponse.Validate if the designated constraints aren't met.
type RegisterStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterStatusResponseValidationError) ErrorName() string {
	return "RegisterStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterStatusResponseValidationError{}
