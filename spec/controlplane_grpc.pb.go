// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/controlplane.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlPlaneServiceClient is the client API for ControlPlaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPlaneServiceClient interface {
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	AddressAssign(ctx context.Context, in *AddressAssignRequest, opts ...grpc.CallOption) (*AddressAssignResponse, error)
	RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error)
	UpdatePeerStatus(ctx context.Context, in *UpdatePeerStatusRequest, opts ...grpc.CallOption) (*UpdatePeerStatusResponse, error)
}

type controlPlaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneServiceClient(cc grpc.ClientConnInterface) ControlPlaneServiceClient {
	return &controlPlaneServiceClient{cc}
}

func (c *controlPlaneServiceClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, "/ControlPlaneService/ListPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) AddressAssign(ctx context.Context, in *AddressAssignRequest, opts ...grpc.CallOption) (*AddressAssignResponse, error) {
	out := new(AddressAssignResponse)
	err := c.cc.Invoke(ctx, "/ControlPlaneService/AddressAssign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error) {
	out := new(RegisterPeerResponse)
	err := c.cc.Invoke(ctx, "/ControlPlaneService/RegisterPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) UpdatePeerStatus(ctx context.Context, in *UpdatePeerStatusRequest, opts ...grpc.CallOption) (*UpdatePeerStatusResponse, error) {
	out := new(UpdatePeerStatusResponse)
	err := c.cc.Invoke(ctx, "/ControlPlaneService/UpdatePeerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPlaneServiceServer is the server API for ControlPlaneService service.
// All implementations must embed UnimplementedControlPlaneServiceServer
// for forward compatibility
type ControlPlaneServiceServer interface {
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	AddressAssign(context.Context, *AddressAssignRequest) (*AddressAssignResponse, error)
	RegisterPeer(context.Context, *RegisterPeerRequest) (*RegisterPeerResponse, error)
	UpdatePeerStatus(context.Context, *UpdatePeerStatusRequest) (*UpdatePeerStatusResponse, error)
	mustEmbedUnimplementedControlPlaneServiceServer()
}

// UnimplementedControlPlaneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControlPlaneServiceServer struct {
}

func (UnimplementedControlPlaneServiceServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedControlPlaneServiceServer) AddressAssign(context.Context, *AddressAssignRequest) (*AddressAssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressAssign not implemented")
}
func (UnimplementedControlPlaneServiceServer) RegisterPeer(context.Context, *RegisterPeerRequest) (*RegisterPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeer not implemented")
}
func (UnimplementedControlPlaneServiceServer) UpdatePeerStatus(context.Context, *UpdatePeerStatusRequest) (*UpdatePeerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeerStatus not implemented")
}
func (UnimplementedControlPlaneServiceServer) mustEmbedUnimplementedControlPlaneServiceServer() {}

// UnsafeControlPlaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServiceServer will
// result in compilation errors.
type UnsafeControlPlaneServiceServer interface {
	mustEmbedUnimplementedControlPlaneServiceServer()
}

func RegisterControlPlaneServiceServer(s grpc.ServiceRegistrar, srv ControlPlaneServiceServer) {
	s.RegisterService(&ControlPlaneService_ServiceDesc, srv)
}

func _ControlPlaneService_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControlPlaneService/ListPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_AddressAssign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressAssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).AddressAssign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControlPlaneService/AddressAssign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).AddressAssign(ctx, req.(*AddressAssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_RegisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).RegisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControlPlaneService/RegisterPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).RegisterPeer(ctx, req.(*RegisterPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_UpdatePeerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).UpdatePeerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControlPlaneService/UpdatePeerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).UpdatePeerStatus(ctx, req.(*UpdatePeerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlPlaneService_ServiceDesc is the grpc.ServiceDesc for ControlPlaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ControlPlaneService",
	HandlerType: (*ControlPlaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPeers",
			Handler:    _ControlPlaneService_ListPeers_Handler,
		},
		{
			MethodName: "AddressAssign",
			Handler:    _ControlPlaneService_AddressAssign_Handler,
		},
		{
			MethodName: "RegisterPeer",
			Handler:    _ControlPlaneService_RegisterPeer_Handler,
		},
		{
			MethodName: "UpdatePeerStatus",
			Handler:    _ControlPlaneService_UpdatePeerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controlplane.proto",
}
