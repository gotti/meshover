syntax = "proto3";
option go_package = "./spec";

import "protoc-gen-validate/validate/validate.proto";
import "proto/ip.proto";

service ControlPlaneService {
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse);
  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse);
}


message AddressAndPort {
  Address ipaddress = 1;
  int32 port = 2 [(validate.rules).int32 = {gte: 1, lte:65535}];
}

message UnderlayUnknown {
  Address endpoint = 1 [(validate.rules).message.required = true];
}

message UnderlayTailscale {
  Address endpoint = 1 [(validate.rules).message.required = true];
}

message Curve25519Key {
  bytes key = 1 [(validate.rules).bytes.len = 32];
}

message Curve25519KeyPair {
  Curve25519Key publickey = 1 [(validate.rules).message.required = true];
  Curve25519Key privatekey = 2 [(validate.rules).message.required = true];
}

message UnderlayWireguard {
  AddressAndPort endpoint = 1 [(validate.rules).message.required = true];
  Curve25519Key publicKey = 2 [(validate.rules).message.required = true];
}

message UnderlayLinuxKernelWireguard {
  AddressAndPort endpoint = 1 [(validate.rules).message.required = true];
  Curve25519Key publicKey = 2 [(validate.rules).message.required = true];
}

message SourceBasedRoutingOption {
  repeated AddressCIDR sourceIPRange = 1;
}

message Peer {
  string name = 1;
  ASN asnumber = 2 [(validate.rules).message.required = true];
  AddressCIDR base_address = 3;
  AddressCIDR tunnel_address = 4 [(validate.rules).message.required = true];
  repeated AddressCIDR additional_addresses = 5;
  oneof underlay {
    option (validate.required) = true;
    UnderlayUnknown underlayUnknown = 9;
    UnderlayWireguard underlayWireguard = 10;
    UnderlayLinuxKernelWireguard underlayLinuxKernelWireguard = 11;
  }
  SourceBasedRoutingOption sbrOption = 12;
}

message Peers {
  repeated Peer peers = 1;
}

message ListPeersRequest {
}

message ListPeersResponse {
  Peers peers = 1;
}

message GetAddressRequest {
  string name = 1;
}

message GetAddressResponse {
  ASN asnumber = 1 [(validate.rules).message.required = true];
  AddressCIDR tunnel_address = 2 [(validate.rules).message.required = true];
  AddressCIDR base_address = 3 [(validate.rules).message.required = true];
  repeated AddressCIDR additional_addresses = 4 [(validate.rules).repeated.min_items = 1];
}

message PeerStatus {
  Peer peer = 1 [(validate.rules).message.required = true];
  uint64 txBytes = 2;
  uint64 rxBytes = 3;
  string exporterEndpoint = 4 [(validate.rules).string.uri = true];
}

message UpdatePeerStatusRequest {
  repeated PeerStatus peersStatus = 1;
}

message UpdatePeerStatusResponse {
  bool ok = 1;
}
